name: 'Terraform'

on:
  push:
    branches:
    - main
  workflow_dispatch: {}

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_tenancy_id: ${{secrets.TF_VAR_TENANCY_ID}}
      TF_VAR_compartment_id: ${{secrets.TF_VAR_COMPARTMENT_ID}}
      TF_VAR_fingerprint: ${{secrets.TF_VAR_FINGERPRINT}}
      TF_VAR_user_id: ${{secrets.TF_VAR_USER_ID}}
      TF_VAR_region: ${{secrets.TF_VAR_REGION}}
      TF_VAR_private_key: ${{secrets.TF_VAR_PRIVATE_KEY}}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="address=${{secrets.OCI_BACKEND_PAR_URI}}"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan

      # On push to main, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      run: terraform apply -auto-approve
